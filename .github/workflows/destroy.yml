name: Terraform Destroy Workflow
on:
  workflow_dispatch:  # Permite ejecución manual desde GitHub Actions

jobs:
  destroy:
    name: Destroy Infrastructure with Terraform
    runs-on: ubuntu-latest
    steps:
      # Paso 1: Checkout del código fuente
      - name: Checkout code
        uses: actions/checkout@v3

      # Paso 2: Configurar Terraform CLI
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.8.4

      # Paso 3: Configurar las credenciales de AWS
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      # Paso 4: Inicializar Terraform (esto configurará el backend S3)
      - name: Initialize Terraform
        run: terraform init

      # Paso 5: Vaciar el bucket S3 ANTES de ejecutar terraform destroy
      - name: Empty S3 Bucket (including terraform.tfstate)
        run: |
          BUCKET_NAME="pin-grupo-4"

          # Verificar si el bucket existe antes de intentar vaciarlo
          if aws s3api head-bucket --bucket $BUCKET_NAME 2>/dev/null; then
            echo "El bucket existe. Procediendo a eliminar su contenido..."

            # 1. Eliminar todos los objetos normales
            echo "Eliminando objetos normales..."
            aws s3 rm "s3://$BUCKET_NAME" --recursive || true

            # 2. Eliminar versiones de objetos (si el bucket tiene versionado)
            echo "Obteniendo lista de versiones de objetos..."
            aws s3api list-object-versions --bucket $BUCKET_NAME --query "Versions" --output json | \
            jq -r '.[] | select(.VersionId != null) | "\(.Key) \(.VersionId)"' | while read -r key version_id; do
              echo "Eliminando objeto versionado: $key, versión: $version_id"
              aws s3api delete-object --bucket "$BUCKET_NAME" --key "$key" --version-id "$version_id"
            done

            # 3. Eliminar marcadores de eliminación
            echo "Obteniendo lista de marcadores de eliminación..."
            aws s3api list-object-versions --bucket $BUCKET_NAME --query "DeleteMarkers" --output json | \
            jq -r '.[] | select(.VersionId != null) | "\(.Key) \(.VersionId)"' | while read -r key version_id; do
              echo "Eliminando marcador de eliminación: $key, versión: $version_id"
              aws s3api delete-object --bucket "$BUCKET_NAME" --key "$key" --version-id "$version_id"
            done

            echo "Verificando que el bucket está vacío..."
            remaining_objects=$(aws s3api list-objects --bucket $BUCKET_NAME --query "Contents" --output json)
            remaining_versions=$(aws s3api list-object-versions --bucket $BUCKET_NAME --query "Versions" --output json)
            remaining_markers=$(aws s3api list-object-versions --bucket $BUCKET_NAME --query "DeleteMarkers" --output json)

            if [[ "$remaining_objects" == "[]" && "$remaining_versions" == "[]" && "$remaining_markers" == "[]" ]]; then
              echo "El bucket está completamente vacío."
            else
              echo "ERROR: El bucket aún tiene objetos después de la eliminación. Abortando eliminación del bucket."
              exit 1
            fi
          else
            echo "El bucket no existe o ya está vacío."
          fi

      # Paso 6: Ejecutar Terraform Destroy (solo si el bucket ya está vacío)
      - name: Terraform Destroy
        run: terraform destroy -auto-approve

      # Paso 7: Intentar eliminar el bucket solo si está vacío
      - name: Delete S3 Bucket
        run: |
          BUCKET_NAME="pin-grupo-4"

          # Verificar si el bucket sigue existiendo antes de eliminarlo
          if aws s3api head-bucket --bucket $BUCKET_NAME 2>/dev/null; then
            echo "Intentando eliminar el bucket vacío..."
            aws s3api delete-bucket --bucket $BUCKET_NAME
            echo "Bucket eliminado con éxito."
          else
            echo "El bucket no existe o ya fue eliminado."
          fi
