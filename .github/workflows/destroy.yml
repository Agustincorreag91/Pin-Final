name: Terraform Destroy Workflow
on:
  workflow_dispatch:  # Permite ejecución manual desde GitHub Actions

jobs:
  destroy:
    name: Destroy Infrastructure with Terraform
    runs-on: ubuntu-latest
    steps:
      # Paso 1: Checkout del código fuente
      - name: Checkout code
        uses: actions/checkout@v3

      # Paso 2: Configurar Terraform CLI
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.8.4

      # Paso 3: Configurar las credenciales de AWS
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      # Paso 4: Inicializar Terraform
      - name: Initialize Terraform
        run: terraform init

      # Paso 5: Vaciar el bucket S3 asegurando la eliminación de terraform.tfstate
      - name: Empty S3 Bucket (including terraform.tfstate)
        run: |
          BUCKET_NAME="pin-grupo-4"

          # Verificar si el bucket existe
          if aws s3api head-bucket --bucket $BUCKET_NAME 2>/dev/null; then
            echo "✅ Bucket encontrado, eliminando contenido..."

            # 1️⃣ 🔥 ELIMINAR `terraform.tfstate`
            echo "🗑️ Eliminando terraform.tfstate..."
            aws s3 rm "s3://$BUCKET_NAME/terraform.tfstate" || true

            # 2️⃣ 🔥 ELIMINAR TODAS LAS VERSIONES de `terraform.tfstate`
            versions=$(aws s3api list-object-versions --bucket $BUCKET_NAME --query "Versions[?Key=='terraform.tfstate']" --output json)
            if [[ "$versions" != "null" && "$versions" != "[]" ]]; then
              echo "$versions" | jq -r '.[] | "\(.Key) \(.VersionId)"' | while read -r key version_id; do
                echo "🗑️ Eliminando versión de terraform.tfstate: $version_id"
                aws s3api delete-object --bucket "$BUCKET_NAME" --key "$key" --version-id "$version_id"
              done
            fi

            # 3️⃣ 🔥 ELIMINAR MARCADORES DE ELIMINACIÓN de `terraform.tfstate`
            markers=$(aws s3api list-object-versions --bucket $BUCKET_NAME --query "DeleteMarkers[?Key=='terraform.tfstate']" --output json)
            if [[ "$markers" != "null" && "$markers" != "[]" ]]; then
              echo "$markers" | jq -r '.[] | "\(.Key) \(.VersionId)"' | while read -r key version_id; do
                echo "🗑️ Eliminando marcador de terraform.tfstate: $version_id"
                aws s3api delete-object --bucket "$BUCKET_NAME" --key "$key" --version-id "$version_id"
              done
            fi

            # 4️⃣ 🚀 ELIMINAR TODOS LOS OBJETOS RESTANTES
            echo "🗑️ Eliminando todos los objetos restantes..."
            aws s3 rm "s3://$BUCKET_NAME" --recursive || true

            # 5️⃣ 🔥 ELIMINAR TODAS LAS VERSIONES de los objetos restantes
            versions=$(aws s3api list-object-versions --bucket $BUCKET_NAME --query "Versions" --output json)
            if [[ "$versions" != "null" && "$versions" != "[]" ]]; then
              echo "$versions" | jq -r '.[] | "\(.Key) \(.VersionId)"' | while read -r key version_id; do
                echo "🗑️ Eliminando objeto: $key, versión: $version_id"
                aws s3api delete-object --bucket "$BUCKET_NAME" --key "$key" --version-id "$version_id"
              done
            fi

            # 6️⃣ 🔥 ELIMINAR MARCADORES DE ELIMINACIÓN RESTANTES
            markers=$(aws s3api list-object-versions --bucket $BUCKET_NAME --query "DeleteMarkers" --output json)
            if [[ "$markers" != "null" && "$markers" != "[]" ]]; then
              echo "$markers" | jq -r '.[] | "\(.Key) \(.VersionId)"' | while read -r key version_id; do
                echo "🗑️ Eliminando marcador de eliminación: $key, versión: $version_id"
                aws s3api delete-object --bucket "$BUCKET_NAME" --key "$key" --version-id "$version_id"
              done
            fi

            # 7️⃣ 🔍 VERIFICAR SI EL BUCKET ESTÁ REALMENTE VACÍO
            remaining_objects=$(aws s3api list-objects --bucket $BUCKET_NAME --query "Contents" --output json)
            remaining_versions=$(aws s3api list-object-versions --bucket $BUCKET_NAME --query "Versions" --output json)
            remaining_markers=$(aws s3api list-object-versions --bucket $BUCKET_NAME --query "DeleteMarkers" --output json)

            if [[ "$remaining_objects" == "[]" && "$remaining_versions" == "[]" && "$remaining_markers" == "[]" ]]; then
              echo "✅ El bucket está completamente vacío."
            else
              echo "❌ ERROR: El bucket aún tiene objetos después de la eliminación. Abortando."
              exit 1
            fi
          else
            echo "El bucket no existe o ya está vacío."
          fi

      # Paso 6: Ejecutar Terraform Destroy (solo si el bucket ya está vacío)
      - name: Terraform Destroy
        run: terraform destroy -auto-approve

      # Paso 7: Esperar antes de eliminar el bucket
      - name: Wait for S3 to process deletions
        run: |
          echo "⏳ Esperando 10 segundos para permitir que S3 procese las eliminaciones..."
          sleep 60

      # Paso 8: Intentar eliminar el bucket solo si está vacío
      - name: Delete S3 Bucket
        run: |
          BUCKET_NAME="pin-grupo-4"

          # Verificar si el bucket sigue existiendo antes de eliminarlo
          if aws s3api head-bucket --bucket $BUCKET_NAME 2>/dev/null; then
            echo "🗑️ Intentando eliminar el bucket vacío..."
            aws s3api delete-bucket --bucket $BUCKET_NAME
            echo "✅ Bucket eliminado con éxito."
          else
            echo "El bucket no existe o ya fue eliminado."
          fi
